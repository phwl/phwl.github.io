I"ªg<p>This post describes how to connect the BeagleBone to a Silicon Labs
<a href="https://www.silabs.com/documents/public/data-sheets/Si5351-B.pdf">Si5351</a>
i2c clock generator.</p>

<h2 id="1-i2c-interface-to-si5351">1. I2C Interface to Si5351</h2>
<p>The i2c interface is simple, ensure that the SDA and SCL lines of
the Si5351 are connected to an appropriate port on the Beaglebone.
In the example below, I used /dev/i2c-2.</p>

<p>Then make sure all the software required is installed on the BBG.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>libi2c-dev
</code></pre></div></div>

<p>The commands below show all the i2c devices and that the Si5351 
at address 0x60 is responding to the probe on I2C2 (i2c chip 2):</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debian@beaglebone:~$ i2cdetect -l
i2c-1	i2c       	OMAP I2C adapter                	I2C adapter
i2c-2	i2c       	OMAP I2C adapter                	I2C adapter
i2c-0	i2c       	OMAP I2C adapter                	I2C adapter
debian@beaglebone:~$ i2cdetect -y -r 2
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:          -- -- -- -- -- -- -- -- -- -- -- -- -- 
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
60: 60 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
70: -- -- -- -- -- -- -- --                         
</code></pre></div></div>

<p>Here is the i2c transaction for <code class="language-plaintext highlighter-rouge">i2cdetect -y -r 2 0x60 0x60</code>.</p>

<figure class="">
  <a href="/assets/images/2021/03/si5351-i2c.jpg">
  <img src="/assets/images/2021/03/si5351-i2c.jpg" alt="" />
  
    <figcaption>
      

    </figcaption></a></figure>

<h2 id="2-linux-userspace-driver">2. Linux userspace driver</h2>

<p>There are several ways that this interface can be made. We are going
to create a userspace driver,
which is the most straightforward. 
The following program, derived from the Linux Kernel <a href="https://www.kernel.org/doc/html/latest/i2c/dev-interface.html">userspace driver documentation</a> reads and prints register 0 of device /dev/i2c-2, address 0x60, i.e. register 0 of the Si5351. Note that the reason we need to specify address 0x60 is that there could be multiple devices connected to a single i2c chip.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre><span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/ioctl.h&gt;
#include &lt;linux/i2c-dev.h&gt;
#include &lt;i2c/smbus.h&gt;
</span>
<span class="cp">#define	I2C_FNAME	"/dev/i2c-2"
#define	SI5351_ADDR	0x60
</span>
<span class="kt">int</span>	<span class="n">i2c_file</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">i2c_init</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">i2c_file</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">I2C_FNAME</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">i2c_file</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
		<span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">i2c_read</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">reg</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">ioctl</span><span class="p">(</span><span class="n">i2c_file</span><span class="p">,</span> <span class="n">I2C_SLAVE</span><span class="p">,</span> <span class="n">SI5351_ADDR</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> 
		<span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

	<span class="kt">int</span> <span class="n">res</span><span class="p">;</span>

	<span class="cm">/* Using SMBus commands */</span>
	<span class="n">res</span> <span class="o">=</span> <span class="n">i2c_smbus_read_byte_data</span><span class="p">(</span><span class="n">i2c_file</span><span class="p">,</span> <span class="n">reg</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> 
		<span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
	<span class="k">else</span> 
		<span class="n">printf</span><span class="p">(</span><span class="s">"r dev(0x%x) reg(0x%x)=0x%x</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">SI5351_ADDR</span><span class="p">,</span> <span class="n">reg</span><span class="p">,</span> <span class="n">res</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">i2c_init</span><span class="p">();</span>
	<span class="n">i2c_read</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>It can be compiled and executed as follows:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debian@beaglebone:~<span class="nv">$ </span>gcc <span class="nt">-o</span> si5351 si5351.c <span class="nt">-li2c</span>
debian@beaglebone:~<span class="nv">$ </span>./si5351 
r dev<span class="o">(</span>0x60<span class="o">)</span> reg<span class="o">(</span>0x0<span class="o">)=</span>0x11
</code></pre></div></div>

<h2 id="3-programming-the-clock-generator">3. Programming the Clock Generator</h2>
<p>The <a href="https://www.silabs.com/documents/public/data-sheets/Si5351-B.pdf">data sheet</a> for the Si5351 refers to the <a href="https://www.silabs.com/developers/clockbuilder-pro-software">Clock builder</a> software. This is only available for Windows 
but in embedded systems it is a fact of life that if you use operating
system X, there will be a piece of software that is only supported on operating system Y that you need. Here
is a header file that I generated for CLK0 and CLK1 outputs of 28.1544 MHz.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
</pre></td><td class="code"><pre><span class="cm">/*
 * Si5351A Rev B Configuration Register Export Header File
 *
 * This file represents a series of Silicon Labs Si5351A Rev B 
 * register writes that can be performed to load a single configuration 
 * on a device. It was created by a Silicon Labs ClockBuilder Pro
 * export tool.
 *
 * Part:		                                       Si5351A Rev B
 * Design ID:                                          
 * Includes Pre/Post Download Control Register Writes: Yes
 * Created By:                                         ClockBuilder Pro v3.1 [2021-01-18]
 * Timestamp:                                          2021-03-12 15:00:15 GMT-08:00
 *
 * A complete design report corresponding to this export is included at the end 
 * of this header file.
 *
 */</span>

<span class="cp">#ifndef SI5351A_REVB_REG_CONFIG_HEADER
#define SI5351A_REVB_REG_CONFIG_HEADER
</span>
<span class="cp">#define SI5351A_REVB_REG_CONFIG_NUM_REGS				52
</span>
<span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
	<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">address</span><span class="p">;</span> <span class="cm">/* 16-bit register address */</span>
	<span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">value</span><span class="p">;</span> <span class="cm">/* 8-bit register data */</span>

<span class="p">}</span> <span class="n">si5351a_revb_register_t</span><span class="p">;</span>

<span class="n">si5351a_revb_register_t</span> <span class="k">const</span> <span class="n">si5351a_revb_registers</span><span class="p">[</span><span class="n">SI5351A_REVB_REG_CONFIG_NUM_REGS</span><span class="p">]</span> <span class="o">=</span>
<span class="p">{</span>
	<span class="p">{</span> <span class="mh">0x0002</span><span class="p">,</span> <span class="mh">0x53</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0003</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0004</span><span class="p">,</span> <span class="mh">0x20</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0007</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x000F</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0010</span><span class="p">,</span> <span class="mh">0x0F</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0011</span><span class="p">,</span> <span class="mh">0x0F</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0012</span><span class="p">,</span> <span class="mh">0x8C</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0013</span><span class="p">,</span> <span class="mh">0x8C</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0014</span><span class="p">,</span> <span class="mh">0x8C</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0015</span><span class="p">,</span> <span class="mh">0x8C</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0016</span><span class="p">,</span> <span class="mh">0x8C</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0017</span><span class="p">,</span> <span class="mh">0x8C</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x001A</span><span class="p">,</span> <span class="mh">0xAF</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x001B</span><span class="p">,</span> <span class="mh">0xC8</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x001C</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x001D</span><span class="p">,</span> <span class="mh">0x0E</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x001E</span><span class="p">,</span> <span class="mh">0x8D</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x001F</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0020</span><span class="p">,</span> <span class="mh">0x85</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0021</span><span class="p">,</span> <span class="mh">0x58</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x002A</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x002B</span><span class="p">,</span> <span class="mh">0x04</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x002C</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x002D</span><span class="p">,</span> <span class="mh">0x0D</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x002E</span><span class="p">,</span> <span class="mh">0xE0</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x002F</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0030</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0031</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0032</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0033</span><span class="p">,</span> <span class="mh">0x04</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0034</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0035</span><span class="p">,</span> <span class="mh">0x0D</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0036</span><span class="p">,</span> <span class="mh">0xE0</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0037</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0038</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0039</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x005A</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x005B</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0095</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0096</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0097</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0098</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x0099</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x009A</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x009B</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x00A2</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x00A3</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x00A4</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x00A5</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x00A6</span><span class="p">,</span> <span class="mh">0x00</span> <span class="p">},</span>
	<span class="p">{</span> <span class="mh">0x00B7</span><span class="p">,</span> <span class="mh">0x92</span> <span class="p">},</span>

<span class="p">};</span>

<span class="cm">/*
 * Design Report
 *
 * Overview
 * ========
 * Part:               Si5351A
 * Created By:         ClockBuilder Pro v3.1 [2021-01-18]
 * Timestamp:          2021-03-12 15:00:15 GMT-08:00
 * 
 * Design Notes
 * ============
 * Si5351A 10-pin MSOP
 * 
 * Design Rule Check
 * =================
 * Errors:
 * - No errors
 * 
 * Warnings:
 * - No warnings
 * 
 * Design
 * ======
 * Inputs:
 *     IN0: 27 MHz
 * 
 * Outputs:
 *    OUT0: 28.1544 MHz
 *          Enabled LVCMOS 8 mA
 *          Offset 0.000 s 
 *    OUT1: 28.1544 MHz
 *          Enabled LVCMOS 8 mA
 *          Offset 0.000 s 
 *    OUT2: Unused
 * 
 * Frequency Plan
 * ==============
 * PLL_A:
 *    Enabled Features = None
 *    Fvco             = 893.9022 MHz
 *    M                = 33.1074888888888888... [ 33 + 4837/45000 ]
 *    Input0:
 *       Source           = Crystal
 *       Source Frequency = 27 MHz
 *       Fpfd             = 27 MHz
 *       Load Capacitance = Load_08pF
 *    Output0:
 *       Features       = None
 *       Disabled State = StopLow
 *       R              = 1  (2^0)
 *       Fout           = 28.1544 MHz
 *       N              = 31.75
 *    Output1:
 *       Features       = None
 *       Disabled State = StopLow
 *       R              = 1  (2^0)
 *       Fout           = 28.1544 MHz
 *       N              = 31.75
 * 
 * Settings
 * ========
 * 
 * Location      Setting Name    Decimal Value      Hex Value        
 * ------------  --------------  -----------------  -----------------
 * 0x0002[3]     XO_LOS_MASK     0                  0x0              
 * 0x0002[4]     CLK_LOS_MASK    1                  0x1              
 * 0x0002[5]     LOL_A_MASK      0                  0x0              
 * 0x0002[6]     LOL_B_MASK      1                  0x1              
 * 0x0002[7]     SYS_INIT_MASK   0                  0x0              
 * 0x0003[7:0]   CLK_OEB         0                  0x00             
 * 0x0004[4]     DIS_RESET_LOLA  0                  0x0              
 * 0x0004[5]     DIS_RESET_LOLB  1                  0x1              
 * 0x0007[7:4]   I2C_ADDR_CTRL   0                  0x0              
 * 0x000F[2]     PLLA_SRC        0                  0x0              
 * 0x000F[3]     PLLB_SRC        0                  0x0              
 * 0x000F[4]     PLLA_INSELB     0                  0x0              
 * 0x000F[5]     PLLB_INSELB     0                  0x0              
 * 0x000F[7:6]   CLKIN_DIV       0                  0x0              
 * 0x0010[1:0]   CLK0_IDRV       3                  0x3              
 * 0x0010[3:2]   CLK0_SRC        3                  0x3              
 * 0x0010[4]     CLK0_INV        0                  0x0              
 * 0x0010[5]     MS0_SRC         0                  0x0              
 * 0x0010[6]     MS0_INT         0                  0x0              
 * 0x0010[7]     CLK0_PDN        0                  0x0              
 * 0x0011[1:0]   CLK1_IDRV       3                  0x3              
 * 0x0011[3:2]   CLK1_SRC        3                  0x3              
 * 0x0011[4]     CLK1_INV        0                  0x0              
 * 0x0011[5]     MS1_SRC         0                  0x0              
 * 0x0011[6]     MS1_INT         0                  0x0              
 * 0x0011[7]     CLK1_PDN        0                  0x0              
 * 0x0012[1:0]   CLK2_IDRV       0                  0x0              
 * 0x0012[3:2]   CLK2_SRC        3                  0x3              
 * 0x0012[4]     CLK2_INV        0                  0x0              
 * 0x0012[5]     MS2_SRC         0                  0x0              
 * 0x0012[6]     MS2_INT         0                  0x0              
 * 0x0012[7]     CLK2_PDN        1                  0x1              
 * 0x0013[1:0]   CLK3_IDRV       0                  0x0              
 * 0x0013[3:2]   CLK3_SRC        3                  0x3              
 * 0x0013[4]     CLK3_INV        0                  0x0              
 * 0x0013[5]     MS3_SRC         0                  0x0              
 * 0x0013[6]     MS3_INT         0                  0x0              
 * 0x0013[7]     CLK3_PDN        1                  0x1              
 * 0x0014[1:0]   CLK4_IDRV       0                  0x0              
 * 0x0014[3:2]   CLK4_SRC        3                  0x3              
 * 0x0014[4]     CLK4_INV        0                  0x0              
 * 0x0014[5]     MS4_SRC         0                  0x0              
 * 0x0014[6]     MS4_INT         0                  0x0              
 * 0x0014[7]     CLK4_PDN        1                  0x1              
 * 0x0015[1:0]   CLK5_IDRV       0                  0x0              
 * 0x0015[3:2]   CLK5_SRC        3                  0x3              
 * 0x0015[4]     CLK5_INV        0                  0x0              
 * 0x0015[5]     MS5_SRC         0                  0x0              
 * 0x0015[6]     MS5_INT         0                  0x0              
 * 0x0015[7]     CLK5_PDN        1                  0x1              
 * 0x0016[1:0]   CLK6_IDRV       0                  0x0              
 * 0x0016[3:2]   CLK6_SRC        3                  0x3              
 * 0x0016[4]     CLK6_INV        0                  0x0              
 * 0x0016[5]     MS6_SRC         0                  0x0              
 * 0x0016[6]     FBA_INT         0                  0x0              
 * 0x0016[7]     CLK6_PDN        1                  0x1              
 * 0x0017[1:0]   CLK7_IDRV       0                  0x0              
 * 0x0017[3:2]   CLK7_SRC        3                  0x3              
 * 0x0017[4]     CLK7_INV        0                  0x0              
 * 0x0017[5]     MS7_SRC         0                  0x0              
 * 0x0017[6]     FBB_INT         0                  0x0              
 * 0x0017[7]     CLK7_PDN        1                  0x1              
 * 0x001C[17:0]  MSNA_P1         3725               0x00E8D          
 * 0x001F[19:0]  MSNA_P2         34136              0x08558          
 * 0x001F[23:4]  MSNA_P3         45000              0x0AFC8          
 * 0x002C[17:0]  MS0_P1          3552               0x00DE0          
 * 0x002F[19:0]  MS0_P2          0                  0x00000          
 * 0x002F[23:4]  MS0_P4          4                  0x00004          
 * 0x0034[17:0]  MS1_P1          3552               0x00DE0          
 * 0x0037[19:0]  MS1_P2          0                  0x00000          
 * 0x0037[23:4]  MS1_P4          4                  0x00004          
 * 0x005A[7:0]   MS6_P2          0                  0x00             
 * 0x005B[7:0]   MS7_P2          0                  0x00             
 * 0x0095[14:0]  SSDN_P2         0                  0x0000           
 * 0x0095[7]     SSC_EN          0                  0x0              
 * 0x0097[14:0]  SSDN_P3         0                  0x0000           
 * 0x0097[7]     SSC_MODE        0                  0x0              
 * 0x0099[11:0]  SSDN_P1         0                  0x000            
 * 0x009A[15:4]  SSUDP           0                  0x000            
 * 0x00A2[21:0]  VCXO_PARAM      0                  0x000000         
 * 0x00A5[7:0]   CLK0_PHOFF      0                  0x00             
 * 0x00A6[7:0]   CLK1_PHOFF      0                  0x00             
 * 0x00B7[7:6]   XTAL_CL         2                  0x2
 * 
 *
 */</span>

<span class="cp">#endif</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Our approach will be to use the header file above, <a href="https://www.silabs.com/documents/public/application-notes/AN619.pdf">Application Note AN619 Manually Generating an Si5351 Register Map for 10-MSOP and
20-QFN Devices</a> and a <a href="https://www.silabs.com/community/timing/knowledge-base.entry.html/2011/02/18/programming_the_si53-IrM8">Silicon Labs
Knowledge Base entry</a> which says</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ClockBuilder Desktop allows a user to generate RAM configuration files to program the Si5351 with custom frequency plans via I2C.  Once the register map has been generated, use the procedure below to program the device.

1. Disable all outputs.
       reg3 = 0xFF
2. Write reg187 = 0xC0
3. Power down all output drivers
       reg 16 = 0x80*
       reg 17 = 0x80*
       reg 18 = 0x80*
       reg 19 = 0x80*
       reg 20 = 0x80*
       reg 21 = 0x80*
       reg 22 = 0x80*
       reg 23 = 0x80*
       * If using the Si5351C with no crystal present on XA/XB, set reg16-23 = 0x84.
4. Set interrupt maks register (see Register 2 description in datasheet)
5. If needed, set crystal load capacitance, XTAL_CL in reg183[7:6].  See datasheet for register description.
6. Write registers 15-92 and 149-170 using the contents of register map generated by ClockBuilder Desktop.
7. Apply PLL A and PLL B soft reset.
       reg177 = 0xAC
8. Enable outputs with OEB control in register 3.
</code></pre></div></div>

<p>If these steps are followed, the output as specified in the include file
should appear. It doesnât look much like a square wave on my 150 MHz 
bandwidth oscilloscope. Why?</p>

<figure class="">
  <a href="/assets/images/2021/03/si5351-osc.jpg">
  <img src="/assets/images/2021/03/si5351-osc.jpg" alt="" />
  
    <figcaption>
      

    </figcaption></a></figure>

<p>Finally, we wish to have the inphase (I) clock (CLK0) lagging the quadrature clock (CLK1) by 90 degrees (or 1/4 cycle). We can do this by setting the CLK1_PHOFF register to the appropriate value.</p>
:ET