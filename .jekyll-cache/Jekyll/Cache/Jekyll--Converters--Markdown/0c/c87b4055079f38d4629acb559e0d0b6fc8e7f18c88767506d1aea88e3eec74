I"à&<p>I have been using <a href="https://wordpress.com/">Wordpress</a> for many years.
It produces good looking websites and is easy to install and maintain.
Unfortunately, it isnâ€™t easy at all to backup the website, and the
interface is all web-based meaning it is difficult to create
scripts which update the website. The old website is <a href="http://phwl.org/blog">http://phwl.org/blog</a>
and the new website can be viewed at <a href="https://phwl.github.io">https://phwl.github.io</a>.
I will be switching them over at some point and moved the old
domain to a spare <a href="http://uxa.apl.mybluehost.me/">http://uxa.apl.mybluehost.me/</a>.</p>

<p>Most programmers use <a href="https://www.github.com">github</a> which offers
<a href="https://pages.github.com">Github Pages</a> for website hosting.
The advantages over Wordpress plus hosting are:</p>
<ul>
  <li>It is free.</li>
  <li>Websites can be edited with a normal text editor.</li>
  <li>It is hosted by Github so version control etc is integrated.</li>
  <li>A local copy is available so scripts to automate updating the
website etc are simple and changes can be made while offline.</li>
  <li>It is easy to make backups.</li>
  <li>Latex rendering is easy.</li>
  <li>Markdown makes code blocks easier.</li>
</ul>

<p>I managed to move <a href="http://phwl.org">phwl.org</a> to Github under MacOS using the
steps below.</p>

<h2 id="install-jekyll">Install Jekyll</h2>
<ul>
  <li>Install ruby, rbenv, bundler and jekyll (I used homebrew) <a href="https://jekyllrb.com/docs/installation/macos/">https://jekyllrb.com/docs/installation/macos/</a></li>
</ul>

<h2 id="install-minimal-mistakes-jekyll-theme">Install minimal-mistakes-jekyll theme</h2>
<ul>
  <li>Jekyll is not compatible with the stupid Dropbox directory name <code class="highlighter-rouge">'Dropbox\ \(Sydney\ Uni\)/'</code>, and I donâ€™t think there is a way to change it. To get around this I put my website directory outside of Dropbox and made a symbolic link (inside Dropbox) so it would be backed up</li>
  <li>Make a copy of <a href="https://github.com/mmistakes/mm-github-pages-starter">https://github.com/mmistakes/mm-github-pages-starter</a>, edit the _config.yml</li>
</ul>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bundle</span>
<span class="n">bundle</span> <span class="n">update</span>
<span class="sb">``` ruby

  * To use the local server, type `</span><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">jekyll</span> <span class="n">serve</span> <span class="o">--</span><span class="n">incremental</span><span class="sb">`
and browse to `</span><span class="n">localhost</span><span class="p">:</span><span class="mi">4000</span><span class="sb">`.

## Convert website
  * Use the Wordpress exporter to export old website in xml format (tried the Jekyll converter plugin but that doesn't work for large websites). This just gives the content, without attachments etc. Then
  * Use [exitwp](https://github.com/thomasf/exitwp) to convert Wordpress to Jekyll
  * Copy all the images and documents from the Wordpress site (`</span><span class="n">wp</span><span class="o">-</span><span class="n">content</span><span class="sb">` directory) using `</span><span class="n">ftp</span><span class="sb">`. I used `</span><span class="no">FileZilla</span><span class="sb">` from the App store for this.
  * Copy the _posts directory from `</span><span class="n">exitwp</span><span class="sb">` into the Jekyll website.
  * Copy wp-content files into `</span><span class="n">assets</span><span class="o">/</span><span class="n">images</span><span class="sb">` on the Jekyll website.
  * To make publically available, type `</span><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">jekyll</span> <span class="n">build</span><span class="sb">` and then push the files up to Github (the repository is &lt;https://github.com/phwl/phwl.github.io&gt;)

## Fix `</span><span class="n">_posts</span><span class="sb">` and `</span><span class="n">_pages</span><span class="sb">`
  * This took the most time. The main changes I needed to do was to fix the headers: remove the old `</span><span class="n">link</span><span class="sb">` header, add a teaser image (blank one if unneeded). Then I edited the image insertion code, which involved the extensive use of Python scripts to do global replacements like

~~~~
import fileinput
import re

for line in fileinput.input(sys.argv[1], inplace=1, backup='.bak'):
    line = re.sub(r'</span><span class="se">\[</span><span class="sb">!.*</span><span class="se">\(</span><span class="sb">(.+)</span><span class="se">\)</span><span class="sb">.*</span><span class="se">\]\(</span><span class="sb">.*</span><span class="se">\)</span><span class="sb">', r'[![](</span><span class="se">\1</span><span class="sb">){: .align-center}](</span><span class="se">\1</span><span class="sb">)', line.rstrip())
    print(line)
~~~~
 * I later added links to the original image with this script.

~~~~
import fileinput
import re

for line in fileinput.input(inplace=1, backup='.bak'):
    line = re.sub('!</span><span class="se">\[</span><span class="sb">(.*)</span><span class="se">\]\(</span><span class="sb">(.*)</span><span class="se">\)\{</span><span class="sb">: .align-center</span><span class="se">\}</span><span class="sb">',r'[![</span><span class="se">\1</span><span class="sb">](</span><span class="se">\2</span><span class="sb">){: .align-center}](</span><span class="se">\2</span><span class="sb">)', line.rstrip())
    print(line)
~~~~
 * and then changed them yet again to use the include form

~~~~

{% include figure image_path="/assets/images/2019/10/IMG_1268.jpg" caption="Shenzhen" %}

~~~~

 * I also used wide pages &lt;https://mmistakes.github.io/minimal-mistakes/markup-text-readability-wide-page/&gt;

## Customise website
  * Since I wanted teaser images appearing on the front page, I put a copy of &lt;https://github.com/justinrummel/jr.com-mm/blob/jr-branch/_includes/archive-single.html&gt; in `</span><span class="n">_includes</span><span class="o">/</span><span class="n">archive</span><span class="o">-</span><span class="n">single</span><span class="p">.</span><span class="nf">html</span><span class="sb">`
  * To use a custom domain &lt;https://help.github.com/en/articles/managing-a-custom-domain-for-your-github-pages-site&gt;
  * To use single pages without sidebar &lt;https://github.com/mmistakes/minimal-mistakes/issues/1322#issuecomment-521386064&gt;
  * To change home to a grid layout I changed home.html so the loop is in a grid wrapper

</span></code></pre></div></div>
<div class="grid__wrapper">

</div>
<p>```</p>
<ul>
  <li>Make figures linked to the image</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&lt;figure class="{{ include.class }}"&gt;
  &lt;a href=
    {% if include.image_path contains "://" %}
      "{{ include.image_path }}"
    {% else %}
      "{{ include.image_path | relative_url }}"
    {% endif %}&gt;
  &lt;img src=
    {% if include.image_path contains "://" %}
      "{{ include.image_path }}"
    {% else %}
      "{{ include.image_path | relative_url }}"
    {% endif %}
    alt="{% if include.alt %}{{ include.alt }}{% endif %}"&gt;
  {% if include.caption %}
    &lt;figcaption&gt;
      {{ include.caption | markdownify | remove: "&lt;p&gt;" | remove: "&lt;/p&gt;" }}
    &lt;/figcaption&gt;{% endif %}&lt;/a&gt;&lt;/figure&gt;

</code></pre></div></div>
<ul>
  <li>To enable <script type="math/tex">\LaTeX</script> rendering with mathjax (if it didnâ€™t work the LaTeX symbol would not have appeared), I created a file in <code class="highlighter-rouge">_includes/latex.html</code> with</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&lt;script type="text/javascript" async
  src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"&gt;
&lt;/script&gt;

</code></pre></div></div>
<p>This is similar to the approach in <a href="https://haixing-hu.github.io/programming/2013/09/20/how-to-use-mathjax-in-jekyll-generated-github-pages/">https://haixing-hu.github.io/programming/2013/09/20/how-to-use-mathjax-in-jekyll-generated-github-pages/</a>.</p>

<h2 id="links">Links</h2>
<p>I found the following sites helpful:</p>
<ul>
  <li><a href="https://www.alexdglover.com/the-move-to-jekyll/">https://www.alexdglover.com/the-move-to-jekyll/</a></li>
  <li><a href="http://www.seanbuscay.com/blog/jekyll-teaser-pager-and-read-more/">http://www.seanbuscay.com/blog/jekyll-teaser-pager-and-read-more/</a></li>
  <li><a href="https://stackoverflow.com/questions/25463865/in-jekyll-how-do-i-grab-a-posts-first-image">https://stackoverflow.com/questions/25463865/in-jekyll-how-do-i-grab-a-posts-first-image</a></li>
  <li><a href="https://www.vgemba.net/blog/Blog-Migration-Part-1-Setup/">https://www.vgemba.net/blog/Blog-Migration-Part-1-Setup/</a></li>
  <li><a href="https://github.com/merlos/jekyll-auto-image">https://github.com/merlos/jekyll-auto-image</a></li>
  <li><a href="http://lanyon.getpoole.com/">http://lanyon.getpoole.com/</a></li>
  <li><a href="http://drjekyllthemes.github.io/">http://drjekyllthemes.github.io/</a></li>
  <li><a href="https://gykovacsblog.wordpress.com/tag/jekyll-scholar/">https://gykovacsblog.wordpress.com/tag/jekyll-scholar/</a></li>
  <li><a href="https://www.aravindiyer.com/tech/how-i-made-my-website-with-jekyll/#">https://www.aravindiyer.com/tech/how-i-made-my-website-with-jekyll/#</a></li>
  <li><a href="https://github.com/alshedivat/al-folio">https://github.com/alshedivat/al-folio</a></li>
  <li><a href="https://haixing-hu.github.io/programming/2013/09/20/how-to-use-mathjax-in-jekyll-generated-github-pages/">https://haixing-hu.github.io/programming/2013/09/20/how-to-use-mathjax-in-jekyll-generated-github-pages/</a></li>
</ul>
:ET