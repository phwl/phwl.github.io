I"˙g<div class="maketitle">

## Research in the Computer Engineering Lab

<div class="author">

</div>

  

<div class="date">

<span class="cmr-12">February 28, 2020</span>

</div>

</div>

<p>The Computer Engineering Lab focuses on how to use field programmable
gate array, VLSI and parallel processor technologies to solve difficult
computing problems. We seek novel architectures, applications and design
techniques for problems which combine signal processing and machine
learning.</p>

<h3 id="1--machine-learning"><span class="titlemark">1 </span> <span id="x1-10001"></span>Machine Learning</h3>

<h4 id="11--low-precision-neural-networks"><span class="titlemark">1.1 </span> <span id="x1-20001.1"></span>Low Precision Neural Networks</h4>

<p>In 2017, in collaboration with Xilinx Research Labs, our FINN paper was
one of the first to demonstrate that binarized neural networks are an
excellent match to FPGA
architectures¬†[<span id="page.3"></span><a href="overview.html#X1-UFGBLJV:17">3</a>].
Implementations exploiting binary weights have led to the highest
performance FPGA implementations of convolutional neural networks. We
further improved the accuracy using Symmetric
Quantization¬†[<a href="overview.html#X1-FFBL:18">1</a>], reporting state of the
art results. We have also developed a fully parallel implementation of
ternary networks which achieved the highest reported performance on an
FPGA for small convolutional neural
networks¬†[<a href="overview.html#X1-TKHBMZL:19">2</a>].</p>

<ul>
  <li>
    <p>[1] <br />
    <a href="overview.html"></a>Julian Faraone et al. ‚ÄúSYQ: Learning Symmetric
    Quantization For Efficient Deep Neural Networks‚Äù. In:
    <span class="cmti-10x-x-109">Proc. Computer Vision</span>
    <span class="cmti-10x-x-109">and Pattern Recognition (CVPR)</span>.
    Utah, US, June 2018.
    <span class="cmcsc-10x-x-109"><span class="small-caps">d</span><span class="small-caps">o</span><span class="small-caps">i</span></span>:
    <a href="https://doi.org/10.1109/CVPR.2018.00452">10.1109/CVPR.2018.00452</a>.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="syq_cvpr18.pdf"><span class="cmtt-10x-x-109">syq_cvpr18.pdf</span></a>.</p>
  </li>
  <li>
    <p>[2] <br />
    Stephen Tridgell et al. ‚ÄúUnrolling Ternary Neural Networks‚Äù. In:
    <span class="cmti-10x-x-109">ACM</span>
    <span class="cmti-10x-x-109">Trans. Reconfigurable Technol. Syst.
    </span>12.4 (Oct. 2019), 22:1‚Äì22:23.
    <span class="cmcsc-10x-x-109"><span class="small-caps">i</span><span class="small-caps">s</span><span class="small-caps">s</span><span class="small-caps">n</span></span>:
    1936-7406.
    <span class="cmcsc-10x-x-109"><span class="small-caps">d</span><span class="small-caps">o</span><span class="small-caps">i</span></span>:
    <a href="https://doi.org/10.1145/3359983">10.1145/3359983</a>.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="ternary_trets19.pdf"><span class="cmtt-10x-x-109">ternary_trets19.pdf</span></a>.</p>
  </li>
  <li>
    <p>[3] <br />
    Yaman Umuroglu et al. ‚ÄúFINN: A Framework for Fast, Scalable
    Binarized Neural Network Inference‚Äù. In:
    <span class="cmti-10x-x-109">Proc. ACM/SIGDA International
    Symposium</span> <span class="cmti-10x-x-109">on Field-Programmable
    Gate Arrays (FPGA)</span>. Source code available from
    <a href="https://github.com/Xilinx/BNN-PYNQ">https://github.com/Xilinx/BNN-PYNQ</a>. 2017, pp. 65‚Äì74.
    <span class="cmcsc-10x-x-109"><span class="small-caps">d</span><span class="small-caps">o</span><span class="small-caps">i</span></span>:
    <a href="https://doi.org/10.1145/3020078.3021744">10.1145/3020078.3021744</a>.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="bnn_fpga17.pdf"><span class="cmtt-10x-x-109">bnn_fpga17.pdf</span></a>.</p>
  </li>
</ul>

<h4 id="12--fpga-architectures-for-low-precision-neural-networks"><span class="titlemark">1.2 </span> <span id="x1-30001.2"></span>FPGA Architectures for Low Precision Neural Networks</h4>

<p>We have also been exploring how FPGA architectures can be modified to
better support the implementation of low-precision neural networks. In
2019, collaborating with Fudan University, we developed PIR-DSP, a
digital signal processing (DSP) block compatible with the Xilinx DSP38E2
which supports 9, 4 and 2-bit multiply-accumulation (MAC) operations,
offering a 6, 12, and 24<span class="cmsy-10x-x-109">√ó
</span>improvement in MACs per DSP
respectively¬†[<span id="page.4"></span><a href="overview.html#X2-RZWL:19">1</a>].
We also developed LUXOR, which are vendor-agnostic (LUXOR) and
vendor-specific (LUXOR+) modifications to the Xilinx and Intel logic
elements to allow the efficient implementation of compressor trees. We
demonstrate that LUXOR can deliver an average reduction of
13-19micro-benchmarks from a variety of domains. Binarized neural
networks benefit the most with an average reduction of 37-47utilization,
which is due to the highly-efficient mapping of the XnorPopcount
operation on our proposed LUXOR+ logic cells.</p>

<ul>
  <li>[1] <br />
    <a href="overview.html"></a>SeyedRamin Rasoulinezhad et al. ‚ÄúPIR-DSP: An FPGA
    DSP block Architecture for Multi-Precision Deep Neural Networks‚Äù.
    In: <span class="cmti-10x-x-109">Proc. IEEE Symposium on
    Field-Programmable Custom Computing</span>
    <span class="cmti-10x-x-109">Machines (FCCM)</span>. 2019, pp. 1‚Äì8.
    <span class="cmcsc-10x-x-109"><span class="small-caps">d</span><span class="small-caps">o</span><span class="small-caps">i</span></span>:
    <a href="https://doi.org/10.1109/FCCM.2019.00015">10.1109/FCCM.2019.00015</a>.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="pirdsp_fccm19.pdf"><span class="cmtt-10x-x-109">pirdsp_fccm19.pdf</span></a>.</li>
</ul>

<h4 id="13--on-chip-training"><span class="titlemark">1.3 </span> <span id="x1-40001.3"></span>On-Chip Training</h4>

<p>We have developed a mixed-precision on-chip training implementation of
the SWALP algorithm on the Xilinx Zynq
platform¬†[<span id="page.5"></span><a href="overview.html#X3-FFBVL:19">1</a>].
Using predominantly 8-bit integer numbers, block floating-point
quantisation and stochastic weight averaging techniques are applied
during training to avoid any degradation in accuracy. By using
floating-point for the small number of high-precision operations
required, we achieve a 0.5% accuracy improvement for the MNIST and
CIFAR10 benchmarks, with results within 0.1% of floating point.</p>

<ul>
  <li>[1] <br />
    <a href="overview.html"></a>Sean Fox et al. ‚ÄúTraining Deep Neural Networks in
    Low-Precision with High Accuracy using FPGAs‚Äù. In:
    <span class="cmti-10x-x-109">Proc. International Conference
    on</span> <span class="cmti-10x-x-109">Field Programmable Technology
    (FPT)</span>. Best Paper Award Candidate. 2019, to appear.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="lptrain_fpt19.pdf"><span class="cmtt-10x-x-109">lptrain_fpt19.pdf</span></a>.</li>
</ul>

<h4 id="14--kernel-methods"><span class="titlemark">1.4 </span> <span id="x1-50001.4"></span>Kernel Methods</h4>

<p>We have developed a family of implementations of kernel methods which
can perform simultaneous learning and prediction with different
tradeoffs between capacity, performance, and area. Our microcoded kernel
recursive least squares (KRLS) and kernel normalised least mean squares
(KNLMS) implementations achieves an order of magnitude improvement in
throughput over a microprocessor, and is
programmable¬†[<a href="overview.html#X4-Pang:2016:MKR:3002131.2950061">3</a>].
Our fully pipelined implementation of KNLMS achieves 161¬†GFLOPS, this
being a 10x speedup over a desktop processor and a 2.66x speedup over a
GPU¬†[<a href="overview.html#X4-Fraser:2017:FIK:3166118.3106744">2</a>]. We
developed the <span class="cmti-10x-x-109">braiding</span> technique
which overcomes dependencies by expressing the output as a combination
of the earlier state and other examples in the pipeline. This was
applied to the Naive Online regularised Risk Minimization Algorithm
(NORMA), achieving a latency of less than
100¬†ns¬†[<a href="overview.html#X4-TMFL:15">4</a>]. We also developed a delayed
update scheme to achieve 250¬†Gop/s, a 1.8x improvement on the state of
the art and 12x higher performance than the standard KNLMS
algorithm¬†[<a href="overview.html#X4-FL:20">1</a>] .</p>

<ul>
  <li>
    <p>[1] <br />
    <a href="overview.html"></a>Nicholas J. Fraser and Philip H. W. Leong. ‚ÄúKernel
    Normalised Least Mean Squares with Delayed Model Adaptation‚Äù. In:
    <span class="cmti-10x-x-109">ACM Trans.</span>
    <span class="cmti-10x-x-109">Reconfigurable Technol. Syst.
    </span>(2020), to appear (accepted 17 Dec 2019).
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="dknlms_trets20.pdf"><span class="cmtt-10x-x-109">dknlms_trets20.pdf</span></a>.</p>
  </li>
  <li>
    <p>[2] <br />
    Nicholas J. Fraser et al. ‚ÄúFPGA Implementations of Kernel Normalised
    Least Mean Squares Processors‚Äù. In: <span class="cmti-10x-x-109">ACM
    Trans. Reconfigurable</span> <span class="cmti-10x-x-109">Technol.
    Syst. </span>10.4 (Dec. 2017), 26:1‚Äì26:20.
    <span class="cmcsc-10x-x-109"><span class="small-caps">i</span><span class="small-caps">s</span><span class="small-caps">s</span><span class="small-caps">n</span></span>:
    1936-7406.
    <span class="cmcsc-10x-x-109"><span class="small-caps">d</span><span class="small-caps">o</span><span class="small-caps">i</span></span>:
    <a href="https://doi.org/10.1145/3106744">10.1145/3106744</a>.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="knlms_trets17.pdf"><span class="cmtt-10x-x-109">knlms_trets17.pdf</span></a>.</p>
  </li>
  <li>
    <p>[3] <br />
    Yeyong Pang et al. ‚ÄúA Microcoded Kernel Recursive Least Squares
    Processor Using FPGA Technology‚Äù. In:
    <span class="cmti-10x-x-109">ACM Trans. Reconfigurable</span>
    <span class="cmti-10x-x-109">Technol. Syst. </span>10.1 (Sept.
    2016), 5:1‚Äì5:22.
    <span class="cmcsc-10x-x-109"><span class="small-caps">i</span><span class="small-caps">s</span><span class="small-caps">s</span><span class="small-caps">n</span></span>:
    1936-7406.
    <span class="cmcsc-10x-x-109"><span class="small-caps">d</span><span class="small-caps">o</span><span class="small-caps">i</span></span>:
    <a href="https://doi.org/10.1145/2950061">10.1145/2950061</a>.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="kproc_trets16.pdf"><span class="cmtt-10x-x-109">kproc_trets16.pdf</span></a>.</p>
  </li>
  <li>
    <p>[4] <br />
    Stephen Tridgell et al. ‚ÄúBraiding: a Scheme for Resolving Hazards in
    kernel adaptive filters‚Äù. In: <span class="cmti-10x-x-109">Proc.
    International Conference on Field</span>
    <span class="cmti-10x-x-109">Programmable Technology (FPT)</span>.
    Queenstown, 2015, pp. 136‚Äì143.
    <span class="cmcsc-10x-x-109"><span class="small-caps">d</span><span class="small-caps">o</span><span class="small-caps">i</span></span>:
    <a href="https://doi.org/10.1109/FPT.2015.7393140">10.1109/FPT.2015.7393140</a>.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="braiding_fpt15.pdf"><span class="cmtt-10x-x-109">braiding_fpt15.pdf</span></a>.</p>
  </li>
</ul>

<h3 id="2--reconfigurable-computing"><span class="titlemark">2 </span> <span id="x1-60002"></span>Reconfigurable Computing</h3>

<h4 id="21--fpga-architectures"><span class="titlemark">2.1 </span> <span id="x1-70002.1"></span>FPGA Architectures</h4>

<p>We developed analytical models that relate FPGA architectural parameters
to the
delay¬†[<span id="page.6"></span><a href="overview.html#X5-HWYCL:09">2</a>],
logic size and depth¬†[<a href="overview.html#X5-DLWLL:11">1</a>] of an FPGA
implementation. We also proposed <span class="cmti-10x-x-109">hybrid
FPGAs </span>and a methodology to optimize coarse-grained floating point
units (FPUs) which used common subgraph elimination to determine the
best mix of blocks within an FPU¬†[<a href="overview.html#X5-YSLLW:12">3</a>].</p>

<ul>
  <li>
    <p>[1] <br />
    <a href="overview.html"></a>Joydip Das et al. ‚ÄúAn Analytical Model Relating
    FPGA Architecture to Logic Density and Depth‚Äù. In:
    <span class="cmti-10x-x-109">IEEE Transactions on VLSI
    Systems</span> 9.12 (2011), pp. 2229‚Äì2242.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="anyl_tvlsi11.pdf"><span class="cmtt-10x-x-109">anyl_tvlsi11.pdf</span></a>.</p>
  </li>
  <li>
    <p>[2] <br />
    Eddie Hung et al. ‚ÄúA Detailed Delay Path Model for FPGAs‚Äù. In:
    <span class="cmti-10x-x-109">Proc.</span>
    <span class="cmti-10x-x-109">International Conference on Field
    Programmable Technology (FPT)</span>. Sydney, 2009, pp. 96‚Äì103.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="delay_fpt09.pdf"><span class="cmtt-10x-x-109">delay_fpt09.pdf</span></a>.</p>
  </li>
  <li>
    <p>[3] <br />
    ChiWai Yu et al. ‚ÄúOptimizing Floating Point Units in Hybrid FPGAs‚Äù.
    In: <span class="cmti-10x-x-109">IEEE Transactions on VLSI Systems
    </span>20 (7 2012), pp. 1295‚Äì1303.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="ofpu_tvlsi12.pdf"><span class="cmtt-10x-x-109">ofpu_tvlsi12.pdf</span></a>.</p>
  </li>
</ul>

<h4 id="22--random-number-generators"><span class="titlemark">2.2 </span> <span id="x1-80002.2"></span>Random Number Generators</h4>

<p>We proposed compact true and pseudo random number generators which can
be efficiently implemented on
FPGAs¬†[<span id="page.7"></span><a href="overview.html#X6-TLL:03">2</a>].
Seminal work on Gaussian number generators on FPGAs were also reviewed
and state of the art implementations based on different techniques
proposed¬†[<a href="overview.html#X6-TLLV:07">1</a>].</p>

<ul>
  <li>
    <p>[1] <br />
    <a href="overview.html"></a>David B. Thomas et al. ‚ÄúGaussian random number
    generators‚Äù. In: <span class="cmti-10x-x-109">ACM Computing
    Surveys</span> 39.4 (2007), 11:1‚Äì11:38.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="grng_acmcs07.pdf"><span class="cmtt-10x-x-109">grng_acmcs07.pdf</span></a>.</p>
  </li>
  <li>
    <p>[2] <br />
    K.H. Tsoi, K.H. Leung, and P.H.W. Leong. ‚ÄúCompact FPGA-based True
    and Pseudo Random Number Generators‚Äù. In:
    <span class="cmti-10x-x-109">Proc. IEEE</span>
    <span class="cmti-10x-x-109">Symposium on Field-Programmable Custom
    Computing Machines</span>
    <span class="cmti-10x-x-109">(FCCM)</span>. California, 2003, pp.
    51‚Äì61.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="tprng_fccm03.pdf"><span class="cmtt-10x-x-109">tprng_fccm03.pdf</span></a>.</p>
  </li>
</ul>

<h4 id="23--system-implementation-board-and-vlsi-level"><span class="titlemark">2.3 </span> <span id="x1-90002.3"></span>System Implementation (Board and VLSI Level)</h4>

<p>We recognised that FPGA to processor transfers via the PCI-bus
introduced substantial latency to many applications, and addressed it by
proposing Pilchard, an FPGA card which plugged directly into a memory
slot of a high-performance
processor¬†[<a href="overview.html#X7-LLCTKWL:01">2</a>]. We developed the
highest performance structured ASIC with a 26/5x improvement in
area/delay compared to an FPGA, which is customised using a minimum of 3
masks, i.e. two metals and one via¬†[<a href="overview.html#X7-HACYCLP:13">1</a>].</p>

<ul>
  <li>
    <p>[1] <br />
    <a href="overview.html"></a>Man-Ho Ho et al. ‚ÄúArchitecture and Design Flow for
    a Highly Efficient Structured ASIC‚Äù. In:
    <span class="cmti-10x-x-109">IEEE Transactions on VLSI Systems
    </span>21.3 (2013), pp. 424‚Äì433.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="sasic_tvlsi12.pdf"><span class="cmtt-10x-x-109">sasic_tvlsi12.pdf</span></a>.</p>
  </li>
  <li>
    <p>[2] <br />
    P.H.W. Leong et al. ‚ÄúPilchard - A Reconfigurable Computing Platform
    with Memory Slot Interface‚Äù. In: <span class="cmti-10x-x-109">Proc.
    IEEE Symposium on</span>
    <span class="cmti-10x-x-109">Field-Programmable Custom Computing
    Machines (FCCM)</span>. Selected as one of the 25 most significant
    papers from the first 20 years of FCCM. California, 2001, pp.
    170‚Äì179.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="pilchard_fccm01.pdf"><span class="cmtt-10x-x-109">pilchard_fccm01.pdf</span></a>.</p>
  </li>
</ul>

<h4 id="24--financial-engineering"><span class="titlemark">2.4 </span> <span id="x1-100002.4"></span>Financial Engineering</h4>

<p>We were the first to demonstrate acceleration of Monte Carlo (MC)
techniques for the pricing of complex derivatives using
FPGAs¬†[<span id="page.8"></span><a href="overview.html#X8-ZLHTCLCL:05">1</a>].
Our pipelined MC core implemented the Brace, Gatarek and Musiela (BGM)
interest rate model and was 25 times faster than a software
implementation on a desktop processor.</p>

<ul>
  <li>[1] <br />
    <a href="overview.html"></a>G. L. Zhang et al. ‚ÄúReconfigurable Acceleration for
    Monte Carlo based Financial Simulation‚Äù. In:
    <span class="cmti-10x-x-109">Proc. International Conference on
    Field</span> <span class="cmti-10x-x-109">Programmable Technology
    (FPT)</span>. Singapore, 2005, pp. 215‚Äì222.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="bgm_fpt05.pdf"><span class="cmtt-10x-x-109">bgm_fpt05.pdf</span></a>.</li>
</ul>

<h4 id="25--cryptography"><span class="titlemark">2.5 </span> <span id="x1-110002.5"></span>Cryptography</h4>

<p>We reported the most efficient FPGA implementations of an elliptic curve
processor¬†[<a href="overview.html#X9-LL:02">1</a>], the IDEA
algorithm¬†[<span class="cmbx-10x-x-109">LCTL:00</span>], Montgomery
multiplication¬†[<a href="overview.html#X9-TCL:02">2</a>] and
RC4¬†[<a href="overview.html#X9-TLL:02">3</a>]. We also novel techniques to
implement physically uncloneable functions
(PUFs)¬†[<a href="overview.html#X9-YLX:12">4</a>].</p>

<ul>
  <li>
    <p>[1] <br />
    <a href="overview.html"></a>P.H.W. Leong and K.H. Leung. ‚ÄúA Microcoded Elliptic
    Curve Processor using FPGA Technology‚Äù. In:
    <span class="cmti-10x-x-109">IEEE Transactions on VLSI
    Systems</span> 10.5 (2002), pp. 550‚Äì559.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="ecc_tvlsi02.pdf"><span class="cmtt-10x-x-109">ecc_tvlsi02.pdf</span></a>.</p>
  </li>
  <li>
    <p>[2] <br />
    K.H. Tsoi, O.Y.H. Cheung, and P.H.W. Leong. ‚ÄúA Variable-Radix
    Systolic Montgomery Multiplier‚Äù. In:
    <span class="cmti-10x-x-109">Proc. IEEE Symposium on</span>
    <span class="cmti-10x-x-109">Field-Programmable Custom Computing
    Machines (FCCM)</span>. California, 2002.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="mm_fccm02.pdf"><span class="cmtt-10x-x-109">mm_fccm02.pdf</span></a>.</p>
  </li>
  <li>
    <p>[3] <br />
    K.H. Tsoi, K.H. Lee, and P.H.W. Leong. ‚ÄúA Massively Parallel RC4 Key
    Search Engine‚Äù. In: <span class="cmti-10x-x-109">Proc. IEEE
    Symposium on Field-Programmable</span>
    <span class="cmti-10x-x-109">Custom Computing Machines
    (FCCM)</span>. California, 2002, pp. 13‚Äì21.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="rc4_fccm02.pdf"><span class="cmtt-10x-x-109">rc4_fccm02.pdf</span></a>.</p>
  </li>
  <li>
    <p>[4] <br />
    Haile Yu, Philip H.W. Leong, and Qiang Xu. ‚ÄúAn FPGA Chip
    Identification Generator Using Configurable Ring Oscillator‚Äù. In:
    <span class="cmti-10x-x-109">IEEE</span>
    <span class="cmti-10x-x-109">Transactions on VLSI Systems
    </span>20.11 (2012), pp. 2198‚Äì2207.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="id_tvlsi12.pdf"><span class="cmtt-10x-x-109">id_tvlsi12.pdf</span></a>.</p>
  </li>
</ul>

<h3 id="3--biomedical-engineering"><span class="titlemark">3 </span> <span id="x1-120003"></span>Biomedical Engineering</h3>

<h4 id="31--arrhythmia-classification"><span class="titlemark">3.1 </span> <span id="x1-130003.1"></span>Arrhythmia Classification</h4>

<p>We showed that the morphology of intracardiac electrocardiogram signals
can be used to improve classification accuracy in implantable cardiac
defibrillators
(ICD)¬†[<span id="page.9"></span><a href="overview.html#X10-LJ:92">2</a>], and
that it could be implemented in low-power analogue
VLSI¬†[<a href="overview.html#X10-L:92">4</a>, <a href="overview.html#X10-LJ:95">1</a>].
This led to a patent¬†[<a href="overview.html#X10-LJ:94">3</a>] that has been
cited by all of the major ICD manufacturers such as Medtronic, Cardiac
Pacemakers and Siemens, St. Jude Medical, and Pacesetter, and is being
used in their commercial devices.</p>

<ul>
  <li>
    <p>[1] <br />
    <a href="overview.html"></a>P. H. W. Leong and M.A. Jabri. ‚ÄúA Low Power VLSI
    Arrhythmia Classifier‚Äù. In: <span class="cmti-10x-x-109">IEEE
    Transactions on Neural Networks </span>6.6 (Nov. 1995), pp.
    1435‚Äì1445.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="matic_tnn95.pdf"><span class="cmtt-10x-x-109">matic_tnn95.pdf</span></a>.</p>
  </li>
  <li>
    <p>[2] <br />
    P.H.W. Leong and M. Jabri. ‚ÄúMATIC - an intracardiac tachycardia
    classification system‚Äù. In: <span class="cmti-10x-x-109">Pacing and
    Clinical Electrophysiology</span>
    <span class="cmti-10x-x-109">(PACE) </span>15 (Sept. 1992), pp.
    1317‚Äì1331.</p>
  </li>
  <li>
    <p>[3] <br />
    P.H.W. Leong and M.A. Jabri. <span class="cmti-10x-x-109">A method
    and system for automatically</span>
    <span class="cmti-10x-x-109">classifying intracardiac
    electrograms</span>. US Patent 5,280,792. University of Sydney. Jan.
    1994.</p>
  </li>
  <li>
    <p>[4] <br />
    Philip Leong. ‚ÄúArrhythmia classification using low power VLSI‚Äù. PhD
    thesis. University of Sydney, 1992.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="phdthesis.pdf"><span class="cmtt-10x-x-109">phdthesis.pdf</span></a>.</p>
  </li>
</ul>

<h4 id="32--respiratory-artefact-removal"><span class="titlemark">3.2 </span> <span id="x1-140003.2"></span>Respiratory Artefact Removal</h4>

<p>We have developed feature selection techniques for time series problems,
and applied them to a number of different applications including
respiratory artefact
removal¬†[<span id="page.10"></span><a href="overview.html#X11-PTRML:16">2</a>,
<a href="overview.html#X11-PLRGJKT:17">1</a>]. A parameterised generator is used
to produce a large set of candidate features, and a number of
complementary metrics used to select a subset. This technique was found
to produce significantly improved results in the abovementioned
application domains.</p>

<ul>
  <li>
    <p>[1] <br />
    <a href="overview.html"></a>Thuy T. Pham et al. ‚ÄúAutomated Quality Control of
    Forced Oscillation Measurements: Respiratory Artifact Detection with
    Advanced Feature Extraction‚Äù. In:
    <span class="cmti-10x-x-109">Journal of Applied Physiology
    </span>123 (4 May 2017), jap.00726.2016.
    <span class="cmcsc-10x-x-109"><span class="small-caps">d</span><span class="small-caps">o</span><span class="small-caps">i</span></span>:
    <a href="https://doi.org/10.1152/japplphysiol.00726.2016">10.1152/japplphysiol.00726.2016</a>.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="fot_jappl17.pdf"><span class="cmtt-10x-x-109">fot_jappl17.pdf</span></a>.</p>
  </li>
  <li>
    <p>[2] <br />
    Thuy T. Pham et al. ‚ÄúRespiratory Artefact Removal in Forced
    Oscillation Measurements: A Machine Learning Approach‚Äù. In:
    <span class="cmti-10x-x-109">IEEE Transactions on Biomedical
    Engineering </span>64.8 (Aug. 2017), pp. 1679‚Äì1687.
    <span class="cmcsc-10x-x-109"><span class="small-caps">i</span><span class="small-caps">s</span><span class="small-caps">s</span><span class="small-caps">n</span></span>:
    0018-9294.
    <span class="cmcsc-10x-x-109"><span class="small-caps">d</span><span class="small-caps">o</span><span class="small-caps">i</span></span>:
    <a href="https://doi.org/10.1109/TBME.2016.2554599">10.1109/TBME.2016.2554599</a>.
    <span class="cmcsc-10x-x-109"><span class="small-caps">u</span><span class="small-caps">r</span><span class="small-caps">l</span></span>:
    <a href="fot_tbme16.pdf"><span class="cmtt-10x-x-109">fot_tbme16.pdf</span></a>.</p>
  </li>
</ul>
:ET