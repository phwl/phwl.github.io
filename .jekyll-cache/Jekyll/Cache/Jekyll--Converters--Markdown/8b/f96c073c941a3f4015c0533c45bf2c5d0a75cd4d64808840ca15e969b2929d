I"÷7<p>This post details how to get started with a BeagleBone Green (BBG) microSD card and
program it via GPIO.</p>

<h2 id="1-getting-started">1. Getting Started</h2>
<p>Instructions for getting started with the BBG are available at at 
at <a href="https://beagleboard.org/getting-started">https://beagleboard.org/getting-started</a>. This involves downloading
the Debian Linux image and writing it to a microSD card (make sure you
use the Debian image for the BBG). My version was:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Buster IoT (without graphical desktop) for BeagleBone and PocketBeagle via microSD card
AM3358 Debian 10.3 2020-04-06 4GB SD IoT image for PocketBeagle, BeagleBone, BeagleBone Black, BeagleBone Black Wireless, BeagleBone Black Industrial, BeagleBone Blue, SeeedStudio BeagleBone Green, SeeedStudio BeagleBone Green Wireless, SanCloud BeagleBone Enhanced, Arrow BeagleBone Black Industrial and Mentorel BeagleBone uSomIQ - more info - sha256sum: 22448ba28d0d58e25e875aac3b4e91eaef82e2d11c9d2c43d948ed60708f7434
</code></pre></div></div>

<p>The driver for networking via USB didn‚Äôt work with the latest version
of MacOS (Big Sur 11.2.1) but the BBG was able to use DNS over Ethernet
to connect to my network (this won‚Äôt work in the lab if there is more
than one BBG plugged into the network).  One can then run <code class="language-plaintext highlighter-rouge">ssh</code> to access (use ‚Äútemppwd‚Äù as the
password for user ‚Äúdebian‚Äù)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debian@beaglebone:~<span class="nv">$ </span>ssh <span class="nt">-Y</span> debian@beaglebone.local
Debian GNU/Linux 10

BeagleBoard.org Debian Buster IoT TIDL Image 2020-04-06

Support: http://elinux.org/Beagleboard:BeagleBoneBlack_Debian

default username:password is <span class="o">[</span>debian:temppwd]

debian@beaglebone.local<span class="s1">'s password: 

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Mon Feb 22 22:27:56 2021 from 192.168.0.32
debian@beaglebone:~$
</span></code></pre></div></div>

<h2 id="2-gpio">2. GPIO</h2>
<p>As described in <a href="http://phwl.org/2021/QEMU-ARM-Linux-gpio/">http://phwl.org/2021/QEMU-ARM-Linux-gpio/</a>, libgpiod
is the standard way to use GPIO under Linux and is part of the kernel. 
It includes an Application Programmers‚Äô Interface (API) (refer to the <a href="http://phwl.org/assets/images/2021/02/libgpiod-ref.pdf">libgpiod manual</a>) as well as
a number of command line tools to manipulate GPIOs:</p>
<ul>
  <li>
    <p>gpiodetect - list all gpiochips present on the system, their names, labels
            and number of GPIO lines</p>
  </li>
  <li>
    <p>gpioinfo   - list all lines of specified gpiochips, their names, consumers,
            direction, active state and additional flags</p>
  </li>
  <li>
    <p>gpioget    - read values of specified GPIO lines</p>
  </li>
  <li>
    <p>gpioset    - set values of specified GPIO lines, potentially keep the lines
            exported and wait until timeout, user input or signal</p>
  </li>
  <li>
    <p>gpiofind   - find the gpiochip name and line offset given the line name</p>
  </li>
  <li>
    <p>gpiomon    - wait for events on GPIO lines, specify which events to watch,
            how many events to process before exiting or if the events
            should be reported to the console.</p>
  </li>
</ul>

<p>Examples:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Read the value of a single GPIO line.</span>
<span class="c"># gpioget gpiochip1 23</span>
0

<span class="c"># Read two values at the same time. Set the active state of the lines</span>
<span class="c"># to low.</span>
<span class="c"># gpioget --active-low gpiochip1 23 24 1 1</span>

<span class="c"># Set values of two lines, then daemonize and wait for a signal (SIGINT or</span>
<span class="c"># SIGTERM) before releasing them.</span>
<span class="c"># gpioset --mode=signal --background gpiochip1 23=1 24=0</span>

<span class="c"># Set the value of a single line, then exit immediately. This is useful</span>
<span class="c"># for floating pins.</span>
<span class="c"># gpioset gpiochip1 23=1</span>

<span class="c"># Find a GPIO line by name.</span>
<span class="c"># gpiofind "USR-LED-2" gpiochip1 23</span>

<span class="c"># Toggle a GPIO by name, then wait for the user to press ENTER.</span>
<span class="c"># gpioset --mode=wait `gpiofind "USR-LED-2"`=1</span>

<span class="c"># Wait for three rising edge events on a single GPIO line, then exit.</span>
<span class="c"># gpiomon --num-events=3 --rising-edge gpiochip2 3</span>
event:  RISING EDGE offset: 3 timestamp: <span class="o">[</span>    1151.814356387]
event:  RISING EDGE offset: 3 timestamp: <span class="o">[</span>    1151.815449803]
event:  RISING EDGE offset: 3 timestamp: <span class="o">[</span>    1152.091556803]

<span class="c"># Pause execution until a single event of any type occurs. Don't print</span>
<span class="c"># anything. Find the line by name.</span>
<span class="c"># gpiomon --num-events=1 --silent `gpiofind "USR-IN"`</span>
</code></pre></div></div>

<p>To use it on the BBG, one must
first download the library and include files.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>libgpiod-dev
</code></pre></div></div>

<p>You can check everything is working by detecting the GPIO chips
and printing their labels and state.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debian@beaglebone:~$ gpiodetect
gpiochip0 [gpio] (32 lines)
gpiochip1 [gpio] (32 lines)
gpiochip2 [gpio] (32 lines)
gpiochip3 [gpio] (32 lines)
debian@beaglebone:~$ gpioinfo
gpiochip0 - 32 lines:
	line   0:  "MDIO_DATA"       unused   input  active-high 
	line   1:   "MDIO_CLK"       unused   input  active-high 
...
</code></pre></div></div>

<p>Now turn on the D5 LED for 10 seconds using</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debian@beaglebone:~<span class="nv">$ </span>gpioset <span class="nt">-m</span> <span class="nb">time</span> <span class="nt">-s</span> 10 gpiochip1 <span class="nv">24</span><span class="o">=</span>1
</code></pre></div></div>
<p>and turn it off for 10 seconds</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debian@beaglebone:~$ gpioset -m time -s 10 gpiochip1 24=0
</code></pre></div></div>
<p>Note that after <code class="language-plaintext highlighter-rouge">gpioset</code> exits, the data of the output is undefined.</p>

<h2 id="3-laboratory-experiment">3. Laboratory Experiment</h2>
<h3 id="part-1---s2-button-input-40">Part 1 - S2 Button Input (40%)</h3>
<p>Download, compile and execute the <code class="language-plaintext highlighter-rouge">blink</code> program which flashes the D5 LED as follows</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>phwl@PHWL-MBP ~ % ssh debian@beaglebone.local
Debian GNU/Linux 10

BeagleBoard.org Debian Buster IoT TIDL Image 2020-04-06

Support: http://elinux.org/Beagleboard:BeagleBoneBlack_Debian

default username:password is <span class="o">[</span>debian:temppwd]

debian@beaglebone.local password: 

The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
the exact distribution terms <span class="k">for </span>each program are described <span class="k">in </span>the
individual files <span class="k">in</span> /usr/share/doc/<span class="k">*</span>/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Mon Feb 22 08:49:57 2021 from fe80::8b4:5a85:cfb2:5eb%eth0

debian@beaglebone:~<span class="nv">$ </span>git clone https://github.com/phwl/elec3607-labquestions
Cloning into <span class="s1">'elec3607-labquestions'</span>...
remote: Enumerating objects: 22, <span class="k">done</span><span class="nb">.</span>
remote: Counting objects: 100% <span class="o">(</span>22/22<span class="o">)</span>, <span class="k">done</span><span class="nb">.</span>
remote: Compressing objects: 100% <span class="o">(</span>17/17<span class="o">)</span>, <span class="k">done</span><span class="nb">.</span>
remote: Total 22 <span class="o">(</span>delta 5<span class="o">)</span>, reused 17 <span class="o">(</span>delta 3<span class="o">)</span>, pack-reused 0
Unpacking objects: 100% <span class="o">(</span>22/22<span class="o">)</span>, <span class="k">done</span><span class="nb">.</span>
debian@beaglebone:~<span class="nv">$ </span><span class="nb">cd </span>elec3607-labquestions/labs/lab1-gpio/
debian@beaglebone:~/elec3607-labquestions/labs/lab1-gpio<span class="nv">$ </span>gcc <span class="nt">-o</span> blink blink.c <span class="nt">-lgpiod</span>
debian@beaglebone:~/elec3607-labquestions/labs/lab1-gpio<span class="nv">$ </span>./blink
</code></pre></div></div>

<p>Here is a listing of <code class="language-plaintext highlighter-rouge">blink.c</code></p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="cm">/*
 * **    blink.c -    blink with 1s delay 
 * */</span>

<span class="cp">#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;gpiod.h&gt;
</span>
<span class="cp">#define GPIOCHIP        1
#define GPIOLINE        24
</span>
<span class="kt">int</span> 
<span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
        <span class="k">struct</span> <span class="n">gpiod_chip</span> <span class="o">*</span><span class="n">output_chip</span><span class="p">;</span>
        <span class="k">struct</span> <span class="n">gpiod_line</span> <span class="o">*</span><span class="n">output_line</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">line_value</span><span class="p">;</span>

        <span class="cm">/* open chip and get line */</span>
        <span class="n">output_chip</span> <span class="o">=</span> <span class="n">gpiod_chip_open_by_number</span><span class="p">(</span><span class="n">GPIOCHIP</span><span class="p">);</span>
        <span class="n">output_line</span> <span class="o">=</span> <span class="n">gpiod_chip_get_line</span><span class="p">(</span><span class="n">output_chip</span><span class="p">,</span> <span class="n">GPIOLINE</span><span class="p">);</span>

        <span class="cm">/* config as output and set a description */</span>
        <span class="n">gpiod_line_request_output</span><span class="p">(</span><span class="n">output_line</span><span class="p">,</span> <span class="s">"blink"</span><span class="p">,</span> <span class="n">GPIOD_LINE_ACTIVE_STATE_HIGH</span><span class="p">);</span>

        <span class="k">for</span> <span class="p">(;;)</span>
        <span class="p">{</span>
                <span class="n">line_value</span> <span class="o">=</span> <span class="o">!</span><span class="n">line_value</span><span class="p">;</span>
                <span class="n">gpiod_line_set_value</span><span class="p">(</span><span class="n">output_line</span><span class="p">,</span> <span class="n">line_value</span><span class="p">);</span>
                <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Referring to the <a href="http://phwl.org/assets/images/2021/02/libgpiod-ref.pdf">libgpiod manual</a>, we obtain a descriptor for the chip specified by <code class="language-plaintext highlighter-rouge">GPIOCHIP</code> in line 20. Using that descriptor we obtain one for the line in line 21. 
In line 24, we configure the pin as an output, and give it the name ‚Äúblink‚Äù (this is called a consumer in libgpiod). Line 28 toggles <code class="language-plaintext highlighter-rouge">line_value</code> between a true and false value, which is written to the line in line 29. We then sleep for 1 second before returning to the top of the infinite loop. You can press control-C to exit the program.</p>

<p>Modify the program so that, in addition to blinking the LED, it will
print the status of the S2 button once a second as below.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debian@beaglebone:~<span class="nv">$ </span>./blink 
<span class="nv">S2</span><span class="o">=</span>1
...
<span class="nv">S2</span><span class="o">=</span>0
</code></pre></div></div>

<h3 id="part-2---seven-segment-display-60">Part 2 - Seven Segment Display (60%)</h3>
<p>The data sheet for a seven segment display (SSD) is available <a href="http://www.farnell.com/datasheets/2863910.pdf">here</a>.</p>
<ol>
  <li>Each segment should be driven by a BBG output which supports 6mA drive. Select 6 such pins on the P8 connector that meet this requirement.</li>
  <li>Calculate the resistor value so that the current to drive the LED (voltage is 3.3V-Vf where Vf=the diode forward voltage drop) doesn‚Äôt exceed 4mA.</li>
  <li>Connect up the SSD to the BBG via a breadboard.</li>
  <li>Program the SSD so the value changes in value 0 to 9 every second then goes back to 0. When S2 is pressed it should count backwards.</li>
</ol>
:ET