I"å<p>This post details how to use the GPIO peripheral on the ARM linux image 
built in <a href="/2021/emulated-ARM-Linux-with-Buildroot-and-QEMU/">Creating an emulated ARM Linux system using Buildroot and QEMU</a></p>

<h2 id="1-linux-libgpiod-library-command-line-tools">1. Linux libgpiod Library Command Line Tools</h2>
<p>Since Linux v4.8, the standard way of using Linux GPIO has been via 
<a href="https://git.kernel.org/pub/scm/libs/libgpiod/libgpiod.git/">libgpiod</a>.
Prior to the introduction of libgpiod, the
sysfs interface was used, but sysfs is depreciated and was removed from the mainline Linux kernel
in 2020. 
The best source of information on libgpiod
<a href="https://git.kernel.org/pub/scm/libs/libgpiod/libgpiod.git/about/">comes with the library</a>.</p>

<p>Here is a summary of the command line tools that it comes with:</p>
<ul>
  <li>
    <p>gpiodetect - list all gpiochips present on the system, their names, labels
            and number of GPIO lines</p>
  </li>
  <li>
    <p>gpioinfo   - list all lines of specified gpiochips, their names, consumers,
            direction, active state and additional flags</p>
  </li>
  <li>
    <p>gpioget    - read values of specified GPIO lines</p>
  </li>
  <li>
    <p>gpioset    - set values of specified GPIO lines, potentially keep the lines
            exported and wait until timeout, user input or signal</p>
  </li>
  <li>
    <p>gpiofind   - find the gpiochip name and line offset given the line name</p>
  </li>
  <li>
    <p>gpiomon    - wait for events on GPIO lines, specify which events to watch,
            how many events to process before exiting or if the events
            should be reported to the console.</p>
  </li>
</ul>

<p>Examples (also from the documentation) of how they are used:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Examples:

    # Read the value of a single GPIO line.
    $ gpioget gpiochip1 23
    0

    # Read two values at the same time. Set the active state of the lines
    # to low.
    $ gpioget --active-low gpiochip1 23 24
    1 1

    # Set values of two lines, then daemonize and wait for a signal (SIGINT or
    # SIGTERM) before releasing them.
    $ gpioset --mode=signal --background gpiochip1 23=1 24=0

    # Set the value of a single line, then exit immediately. This is useful
    # for floating pins.
    $ gpioset gpiochip1 23=1

    # Find a GPIO line by name.
    $ gpiofind "USR-LED-2"
    gpiochip1 23

    # Toggle a GPIO by name, then wait for the user to press ENTER.
    $ gpioset --mode=wait `gpiofind "USR-LED-2"`=1

    # Wait for three rising edge events on a single GPIO line, then exit.
    $ gpiomon --num-events=3 --rising-edge gpiochip2 3
    event:  RISING EDGE offset: 3 timestamp: [    1151.814356387]
    event:  RISING EDGE offset: 3 timestamp: [    1151.815449803]
    event:  RISING EDGE offset: 3 timestamp: [    1152.091556803]

    # Wait for a single falling edge event. Specify a custom output format.
    $ gpiomon --format="%e %o %s %n" --falling-edge gpiochip1 4
    0 4 1156 615459801

    # Pause execution until a single event of any type occurs. Don't print
    # anything. Find the line by name.
    $ gpiomon --num-events=1 --silent `gpiofind "USR-IN"`

    # Monitor multiple lines, exit after the first event.
    $ gpiomon --silent --num-events=1 gpiochip0 2 3 5
</code></pre></div></div>
<p>`</p>

<p>Here we use the <code class="language-plaintext highlighter-rouge">libgpiod</code> tools to determine there is one gpiochip (gpiochip0) and that they are initially all set as inputs. We can also see that while
gpio lines can have names, all of the ones on this machine are unnamed.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>phwl@bream:~/src/teaching/buildroot/output/images$ H=~/src/teaching
phwl@bream:~/src/teaching/buildroot/output/images$ cd $H/buildroot/output/imagesphwl@bream:~/src/teaching/buildroot/output/images$ ./start-qemu.sh 
Booting Linux on physical CPU 0x0000000000 [0x410fd034]
...
Welcome to Buildroot
buildroot login: root
# gpiodetect 
gpiochip0 [9030000.pl061] (8 lines)
# gpioinfo
gpiochip0 - 8 lines:
	line   0:      unnamed       unused   input  active-high 
	line   1:      unnamed       unused   input  active-high 
	line   2:      unnamed       unused   input  active-high 
	line   3:      unnamed       unused   input  active-high 
	line   4:      unnamed       unused   input  active-high 
	line   5:      unnamed       unused   input  active-high 
	line   6:      unnamed       unused   input  active-high 
	line   7:      unnamed       unused   input  active-high 
# 
</code></pre></div></div>

<p>Here is a link to a tutorial explaining the
changes
<a href="https://microhobby.com.br/blog/2020/02/02/new-linux-kernel-5-5-new-interfaces-in-gpiolib/">https://microhobby.com.br/blog/2020/02/02/new-linux-kernel-5-5-new-interfaces-in-gpiolib/</a>.</p>

<h2 id="step-2-libgpiod-application-programmers-interface-programming">Step 2 libgpiod Application Programmersâ€™ Interface Programming</h2>

<h2 id="step-3-driver">Step 3 Driver</h2>
<p>The peripheral used in the
qemu_aarch64_virt machine is described in the 
 <a href="https://developer.arm.com/documentation/ddi0190/b">ARM PrimeCell General Purpose Input/Output (PL061) Technical Reference Manual</a> (which we will call the datasheet) GPIO device. There are
two ways to find out its start address in memory. During boot up, the message</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pl061_gpio 9030000.pl061: PL061 GPIO chip registered
</code></pre></div></div>
<p>or using
<code class="language-plaintext highlighter-rouge">info mtree</code> in the QEMU monitor, you get</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0000000009030000-0000000009030fff (prio 0, i/o): pl061
</code></pre></div></div>
<p>Thus the start address (GPIOBASE in the datasheet) is 0x9030000.
The address of GPIODIR is 0x9030400.</p>

:ET