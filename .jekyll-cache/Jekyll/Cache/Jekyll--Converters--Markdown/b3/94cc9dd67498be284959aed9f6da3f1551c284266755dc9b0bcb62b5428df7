I"^O<p>This post details how to control the BeagleBone Green (BBG) via GPIO.</p>

<h2 id="1-gpio">1. GPIO</h2>
<p>Since Linux v4.8, the standard way of using Linux GPIO has been via 
<a href="https://git.kernel.org/pub/scm/libs/libgpiod/libgpiod.git/">libgpiod</a>.
Prior to the introduction of libgpiod, the
sysfs interface was used, but sysfs is depreciated and was removed from the mainline Linux kernel
in 2020. 
The best source of information on libgpiod
<a href="https://git.kernel.org/pub/scm/libs/libgpiod/libgpiod.git/about/">comes with the library</a> and the (<a href="http://phwl.org/assets/images/2021/02/libgpiod-ref.pdf">libgpiod manual</a>).</p>

<p>The library comes with a number of command line tools to manipulate GPIOs:</p>
<ul>
  <li>
    <p>gpiodetect - list all gpiochips present on the system, their names, labels
            and number of GPIO lines</p>
  </li>
  <li>
    <p>gpioinfo   - list all lines of specified gpiochips, their names, consumers,
            direction, active state and additional flags</p>
  </li>
  <li>
    <p>gpioget    - read values of specified GPIO lines</p>
  </li>
  <li>
    <p>gpioset    - set values of specified GPIO lines, potentially keep the lines
            exported and wait until timeout, user input or signal</p>
  </li>
  <li>
    <p>gpiofind   - find the gpiochip name and line offset given the line name</p>
  </li>
  <li>
    <p>gpiomon    - wait for events on GPIO lines, specify which events to watch,
            how many events to process before exiting or if the events
            should be reported to the console.</p>
  </li>
</ul>

<p>Examples:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c"># Read the value of a single GPIO line.</span>
    <span class="nv">$ </span>gpioget gpiochip1 23
    0

    <span class="c"># Read two values at the same time. Set the active state of the lines</span>
    <span class="c"># to low.</span>
    <span class="nv">$ </span>gpioget <span class="nt">--active-low</span> gpiochip1 23 24
    1 1

    <span class="c"># Set values of two lines, then daemonize and wait for a signal (SIGINT or</span>
    <span class="c"># SIGTERM) before releasing them.</span>
    <span class="nv">$ </span>gpioset <span class="nt">--mode</span><span class="o">=</span>signal <span class="nt">--background</span> gpiochip1 <span class="nv">23</span><span class="o">=</span>1 <span class="nv">24</span><span class="o">=</span>0

    <span class="c"># Set the value of a single line, then exit immediately. This is useful</span>
    <span class="c"># for floating pins.</span>
    <span class="nv">$ </span>gpioset gpiochip1 <span class="nv">23</span><span class="o">=</span>1

    <span class="c"># Find a GPIO line by name.</span>
    <span class="nv">$ </span>gpiofind <span class="s2">"USR-LED-2"</span> gpiochip1 23

    <span class="c"># Toggle a GPIO by name, then wait for the user to press ENTER.</span>
    <span class="nv">$ </span>gpioset <span class="nt">--mode</span><span class="o">=</span><span class="nb">wait</span> <span class="sb">`</span>gpiofind <span class="s2">"USR-LED-2"</span><span class="sb">`</span><span class="o">=</span>1

    <span class="c"># Wait for three rising edge events on a single GPIO line, then exit.</span>
    <span class="nv">$ </span>gpiomon <span class="nt">--num-events</span><span class="o">=</span>3 <span class="nt">--rising-edge</span> gpiochip2 3
    event:  RISING EDGE offset: 3 timestamp: <span class="o">[</span>    1151.814356387]
    event:  RISING EDGE offset: 3 timestamp: <span class="o">[</span>    1151.815449803]
    event:  RISING EDGE offset: 3 timestamp: <span class="o">[</span>    1152.091556803]

    <span class="c"># Wait for a single falling edge event. Specify a custom output format.</span>
    <span class="nv">$ </span>gpiomon <span class="nt">--format</span><span class="o">=</span><span class="s2">"%e %o %s %n"</span> <span class="nt">--falling-edge</span> gpiochip1 4 0 4 1156 615459801

    <span class="c"># Pause execution until a single event of any type occurs. Don't print</span>
    <span class="c"># anything. Find the line by name.</span>
    <span class="nv">$ </span>gpiomon <span class="nt">--num-events</span><span class="o">=</span>1 <span class="nt">--silent</span> <span class="sb">`</span>gpiofind <span class="s2">"USR-IN"</span><span class="sb">`</span>

    <span class="c"># Monitor multiple lines, exit after the first event.</span>
    <span class="nv">$ </span>gpiomon <span class="nt">--silent</span> <span class="nt">--num-events</span><span class="o">=</span>1 gpiochip0 2 3 5
</code></pre></div></div>

<p>To use it on the BBG, one must
first download the library and include files.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>libgpiod-dev
</code></pre></div></div>

<p>You can check everything is working by detecting the GPIO chips
and printing their labels and state.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debian@beaglebone:~$ gpiodetect
gpiochip0 [gpio] (32 lines)
gpiochip1 [gpio] (32 lines)
gpiochip2 [gpio] (32 lines)
gpiochip3 [gpio] (32 lines)
debian@beaglebone:~$ gpioinfo
gpiochip0 - 32 lines:
	line   0:  "MDIO_DATA"       unused   input  active-high 
	line   1:   "MDIO_CLK"       unused   input  active-high 
...
</code></pre></div></div>

<p>Now turn on the D5 LED for 10 seconds using</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debian@beaglebone:~<span class="nv">$ </span>gpioset <span class="nt">-m</span> <span class="nb">time</span> <span class="nt">-s</span> 10 gpiochip1 <span class="nv">24</span><span class="o">=</span>1
</code></pre></div></div>
<p>and turn it off for 10 seconds</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debian@beaglebone:~$ gpioset -m time -s 10 gpiochip1 24=0
</code></pre></div></div>
<p>Note that after <code class="language-plaintext highlighter-rouge">gpioset</code> exits, the data of the output is undefined.</p>

<h2 id="2-setting-pinmux-values-via-the-device-tree">2. Setting pinmux values via the Device Tree</h2>
<p>First make the following dts file:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>PHWL-GPIO.dts 
/<span class="k">*</span>  
<span class="k">*</span> Copyright <span class="o">(</span>C<span class="o">)</span> 2012 Texas Instruments Incorporated - http://www.ti.com/
<span class="k">*</span>
<span class="k">*</span> This program is free software<span class="p">;</span> you can redistribute it and/or modify
<span class="k">*</span> it under the terms of the GNU General Purpose License Version 2 as
<span class="k">*</span> published by the Free Software Foundation
<span class="k">*</span>
<span class="k">*</span> Original from: github.com/jadonk/validation-scripts/blob/master/test-capemgr/ 
<span class="k">*</span>
<span class="k">*</span> Modified by Derek Molloy <span class="k">for </span>the example on www.derekmolloy.ie
<span class="k">*</span> that maps GPIO pins <span class="k">for </span>the example
<span class="k">*</span>
<span class="k">*</span> Modified by Philip Leong to <span class="nb">enable </span>pins <span class="k">for </span>SSD experiment
<span class="k">*</span>
<span class="k">*</span>/

/dts-v1/<span class="p">;</span>
/plugin/<span class="p">;</span>

/<span class="o">{</span>
       compatible <span class="o">=</span> <span class="s2">"ti,beaglebone"</span>, <span class="s2">"ti,beaglebone-black"</span><span class="p">;</span>
       part-number <span class="o">=</span> <span class="s2">"DM-GPIO-Test"</span><span class="p">;</span>
       version <span class="o">=</span> <span class="s2">"00A0"</span><span class="p">;</span>

       fragment@0 <span class="o">{</span>
             target <span class="o">=</span> &lt;&amp;am33xx_pinmux&gt;<span class="p">;</span>
            
             __overlay__ <span class="o">{</span>
                  pinctrl_test: DM_GPIO_Test_Pins <span class="o">{</span>
			pinctrl-single,pins <span class="o">=</span> &lt;

				0x150 0x07  /<span class="k">*</span> P9_12 60 OUTPUT MODE7 - The LED Output <span class="k">*</span>/
				0x154 0x07  /<span class="k">*</span> P9_12 60 OUTPUT MODE7 - The LED Output <span class="k">*</span>/
				0x178 0x07  /<span class="k">*</span> P9_12 60 OUTPUT MODE7 - The LED Output <span class="k">*</span>/
				0x078 0x07  /<span class="k">*</span> P9_12 60 OUTPUT MODE7 - The LED Output <span class="k">*</span>/
				0x07c 0x07  /<span class="k">*</span> P9_12 60 OUTPUT MODE7 - The LED Output <span class="k">*</span>/
				0x158 0x07  /<span class="k">*</span> P9_12 60 OUTPUT MODE7 - The LED Output <span class="k">*</span>/
				0x15c 0x07  /<span class="k">*</span> P9_12 60 OUTPUT MODE7 - The LED Output <span class="k">*</span>/
                       
                               /<span class="k">*</span> OUTPUT  GPIO<span class="o">(</span>mode7<span class="o">)</span> 0x07 pulldown, 0x17 pullup, 0x?f no pullup/down <span class="k">*</span>/

			<span class="o">&gt;</span><span class="p">;</span>
		  <span class="o">}</span><span class="p">;</span>
             <span class="o">}</span><span class="p">;</span>
       <span class="o">}</span><span class="p">;</span>

       fragment@1 <span class="o">{</span>
		target <span class="o">=</span> &lt;&amp;ocp&gt;<span class="p">;</span>
		__overlay__ <span class="o">{</span>
			test_helper: helper <span class="o">{</span>
				compatible <span class="o">=</span> <span class="s2">"bone-pinmux-helper"</span><span class="p">;</span>
				pinctrl-names <span class="o">=</span> <span class="s2">"default"</span><span class="p">;</span>
				pinctrl-0 <span class="o">=</span> &lt;&amp;pinctrl_test&gt;<span class="p">;</span>
				status <span class="o">=</span> <span class="s2">"okay"</span><span class="p">;</span>
			<span class="o">}</span><span class="p">;</span>
		<span class="o">}</span><span class="p">;</span>
	<span class="o">}</span><span class="p">;</span>
<span class="o">}</span><span class="p">;</span>
<span class="nv">$ </span><span class="nb">sudo cp </span>PHWL-GPIO-00A0.dtbo /lib/firmware/
</code></pre></div></div>

<p>to build</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>dtc <span class="nt">-O</span> dtb <span class="nt">-o</span> PHWL-GPIO-00A0.dtbo <span class="nt">-b</span> 0 -@ PHWL-GPIO.dts
</code></pre></div></div>
<p>Modify <code class="language-plaintext highlighter-rouge">/boot/uEnv.txt</code> to be:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat</span> /boot/uEnv.txt 
<span class="c">#Docs: http://elinux.org/Beagleboard:U-boot_partitioning_layout_2.0</span>

<span class="nv">uname_r</span><span class="o">=</span>4.14.108-ti-r131
<span class="c">#uuid=</span>
<span class="c">#dtb=</span>
<span class="nv">cmdline</span><span class="o">=</span><span class="nv">coherent_pool</span><span class="o">=</span>1M net.ifnames<span class="o">=</span>0 rng_core.default_quality<span class="o">=</span>100 quiet
<span class="nv">enable_uboot_overlays</span><span class="o">=</span>1
<span class="nv">uboot_overlay_addr0</span><span class="o">=</span>/lib/firmware/PHWL-GPIO-00A0.dtbo

<span class="c">#In the event of edid real failures, uncomment this next line:</span>
<span class="c">#cmdline=coherent_pool=1M net.ifnames=0 rng_core.default_quality=100 quiet video=HDMI-A-1:1024x768@60e</span>

<span class="c">##enable x15: eMMC Flasher:</span>
<span class="c">##make sure, these tools are installed: dosfstools rsync</span>
<span class="c">#cmdline=init=/opt/scripts/tools/eMMC/init-eMMC-flasher-v3-no-eeprom.sh</span>
</code></pre></div></div>
<p>reboot (<code class="language-plaintext highlighter-rouge">shutdown -r now</code>) and the modes should have changed to 007</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ grep 007 /sys/kernel/debug/pinctrl/44e10800.pinmux/pins
pin 21 (PIN21) 44e10854 00000007 pinctrl-single 
pin 23 (PIN23) 44e1085c 00000007 pinctrl-single 
pin 30 (PIN30) 44e10878 00000007 pinctrl-single 
pin 31 (PIN31) 44e1087c 00000007 pinctrl-single 
pin 84 (PIN84) 44e10950 00000007 pinctrl-single 
pin 85 (PIN85) 44e10954 00000007 pinctrl-single 
pin 86 (PIN86) 44e10958 00000007 pinctrl-single 
pin 87 (PIN87) 44e1095c 00000007 pinctrl-single 
pin 94 (PIN94) 44e10978 00000007 pinctrl-single 
</code></pre></div></div>

<h2 id="3-laboratory-experiment">3. Laboratory Experiment</h2>
<h3 id="part-1---s2-button-input-40">Part 1 - S2 Button Input (40%)</h3>
<p>Download, compile and execute the <code class="language-plaintext highlighter-rouge">blink</code> program which flashes the D5 LED as follows</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>phwl@PHWL-MBP ~ % ssh debian@beaglebone.local
Debian GNU/Linux 10

BeagleBoard.org Debian Buster IoT TIDL Image 2020-04-06

Support: http://elinux.org/Beagleboard:BeagleBoneBlack_Debian

default username:password is <span class="o">[</span>debian:temppwd]

debian@beaglebone.local password: 

The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
the exact distribution terms <span class="k">for </span>each program are described <span class="k">in </span>the
individual files <span class="k">in</span> /usr/share/doc/<span class="k">*</span>/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Mon Feb 22 08:49:57 2021 from fe80::8b4:5a85:cfb2:5eb%eth0

debian@beaglebone:~<span class="nv">$ </span>git clone https://github.com/phwl/elec3607-labquestions
Cloning into <span class="s1">'elec3607-labquestions'</span>...
remote: Enumerating objects: 22, <span class="k">done</span><span class="nb">.</span>
remote: Counting objects: 100% <span class="o">(</span>22/22<span class="o">)</span>, <span class="k">done</span><span class="nb">.</span>
remote: Compressing objects: 100% <span class="o">(</span>17/17<span class="o">)</span>, <span class="k">done</span><span class="nb">.</span>
remote: Total 22 <span class="o">(</span>delta 5<span class="o">)</span>, reused 17 <span class="o">(</span>delta 3<span class="o">)</span>, pack-reused 0
Unpacking objects: 100% <span class="o">(</span>22/22<span class="o">)</span>, <span class="k">done</span><span class="nb">.</span>
debian@beaglebone:~<span class="nv">$ </span><span class="nb">cd </span>elec3607-labquestions/labs/lab1-gpio/
debian@beaglebone:~/elec3607-labquestions/labs/lab1-gpio<span class="nv">$ </span>gcc <span class="nt">-o</span> blink blink.c <span class="nt">-lgpiod</span>
debian@beaglebone:~/elec3607-labquestions/labs/lab1-gpio<span class="nv">$ </span>./blink
</code></pre></div></div>

<p>Here is a listing of <code class="language-plaintext highlighter-rouge">blink.c</code></p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="code"><pre><span class="cm">/*
 * **    blink.c -    blink with 1s delay 
 * */</span>

<span class="cp">#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;gpiod.h&gt;
</span>
<span class="cp">#define GPIOCHIP        1
#define GPIOLINE        24
</span>
<span class="kt">int</span> 
<span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
        <span class="k">struct</span> <span class="n">gpiod_chip</span> <span class="o">*</span><span class="n">output_chip</span><span class="p">;</span>
        <span class="k">struct</span> <span class="n">gpiod_line</span> <span class="o">*</span><span class="n">output_line</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">line_value</span><span class="p">;</span>

        <span class="cm">/* open chip and get line */</span>
        <span class="n">output_chip</span> <span class="o">=</span> <span class="n">gpiod_chip_open_by_number</span><span class="p">(</span><span class="n">GPIOCHIP</span><span class="p">);</span>
        <span class="n">output_line</span> <span class="o">=</span> <span class="n">gpiod_chip_get_line</span><span class="p">(</span><span class="n">output_chip</span><span class="p">,</span> <span class="n">GPIOLINE</span><span class="p">);</span>

        <span class="cm">/* config as output and set a description */</span>
        <span class="n">gpiod_line_request_output</span><span class="p">(</span><span class="n">output_line</span><span class="p">,</span> <span class="s">"blink"</span><span class="p">,</span> <span class="n">GPIOD_LINE_ACTIVE_STATE_HIGH</span><span class="p">);</span>

        <span class="k">for</span> <span class="p">(;;)</span>
        <span class="p">{</span>
                <span class="n">line_value</span> <span class="o">=</span> <span class="o">!</span><span class="n">line_value</span><span class="p">;</span>
                <span class="n">gpiod_line_set_value</span><span class="p">(</span><span class="n">output_line</span><span class="p">,</span> <span class="n">line_value</span><span class="p">);</span>
                <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Referring to the <a href="http://phwl.org/assets/images/2021/02/libgpiod-ref.pdf">libgpiod manual</a>, we obtain a descriptor for the chip specified by <code class="language-plaintext highlighter-rouge">GPIOCHIP</code> in line 20. Using that descriptor we obtain one for the line in line 21. 
In line 24, we configure the pin as an output, and give it the name “blink” (this is called a consumer in libgpiod). Line 28 toggles <code class="language-plaintext highlighter-rouge">line_value</code> between a true and false value, which is written to the line in line 29. We then sleep for 1 second before returning to the top of the infinite loop. You can press control-C to exit the program.</p>

<p>Modify the program so that, in addition to blinking the LED, it will
print the status of the S2 button once a second as below.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debian@beaglebone:~<span class="nv">$ </span>./blink 
<span class="nv">S2</span><span class="o">=</span>1
...
<span class="nv">S2</span><span class="o">=</span>0
</code></pre></div></div>

<h3 id="part-2---seven-segment-display-60">Part 2 - Seven Segment Display (60%)</h3>

<p>The data sheet for a seven segment display (SSD) is available <a href="https://au.element14.com/broadcom-limited/5082-7613/led-display-0-3-he-red/dp/1175576">here</a>.</p>
<ul>
  <li>Each segment should be driven by a BBG output which supports 6mA drive. Select 6 such pins on the P8 connector that meet this requirement.</li>
  <li>Calculate the resistor value so that the current to drive the LED (voltage is 3.3V-Vf where Vf=the diode forward voltage drop) doesn’t exceed 4mA.</li>
  <li>Connect up the SSD to the BBG via a breadboard.</li>
  <li>Program the SSD so the value changes in value 0 to 9 every second then goes back to 0. When S2 is pressed it should count backwards.</li>
</ul>

<figure class="">
  <a href="/assets/images/2021/02/ledres.jpg">
  <img src="/assets/images/2021/02/ledres.jpg" alt="" />
  
    <figcaption>
      

    </figcaption></a></figure>

:ET